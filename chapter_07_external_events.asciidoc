[[chapter_07_external_events]]
== Event-Driven Architecture (using events to integrate microservices)


We've got a microservice with an web api, but what about other ways of talking
to other systems?  how does it know if, say, a shipment is delayed or the
quantity is amended?  how does it communicate to our warehouse system to say
that an order has been allocated and needs to be sent to a customer?

In this chapter we'd like to show how the events metaphor can be stretched
to encompass the way that we handle incoming and outgoing messages from the
system.

Outline:

* E2E test
* first cut of _redis_pubsub.py_
* test-drive `services.change_batch_quantity` at service layer
* brief aside on `ProductRepository.get_by_batchid()`
* add events for allocated, deallocated
* and handlers for both
* discuss internal vs external events

* stop and reflect:
    * handlers call services
    * services raise events which call handlers which call services
    * primitive obsession code smell
    * dependencies are a bit all over the place

* => introduce commands
* all services become handlers

* segue to next chapter on dependency mgmt


