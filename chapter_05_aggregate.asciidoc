[[chapter_05_aggregate]]
== Aggregates and consistency boundaries

As we start to think about scaling up our app, we realise that our model
of allocating lines against all available batches may not scale.  If we've
got tens of thousands of orders per hour, and hundreds of thousands of
order lines, we can't hold a lock over the whole `batches` table for
every single one.


=== Choosing the right Aggregate

[quote, Eric Evans, DDD blue book]
____
// We need an abstraction for encapsulating references within the model.
An AGGREGATE is a cluster of associated objects that we treat as a unit for the
purpose of data changes.
// Each AGGREGATE has a root and a boundary. The boundary
// defines what is inside the AGGREGATE. The root is a single, specific ENTITY
// contained in the AGGREGATE. The root is the only member of the AGGREGATE that
// outside objects are allowed to hold references to, although objects within the
// boundary may hold references to each other. ENTITIES other than the root have
// local identity, but that identity needs to be distinguishable only within the
// AGGREGATE, because no outside object can ever see it out of the context of the
// root ENTITY.
____

Even if it weren't for the data integrity concerns, as a model gets more complex
and grows more different _Entity_ and _Value Objects_, all of which start pointing
to each other, it can be hard to keep track of who can modify what.  Especially
when we have _Collections_ in the model like we do (our batches are a collection),
it's a good idea to nominate some entities to be the single entrypoint for
modifying their related objects.  It makes the system conceptually simpler
and easy to reason about if you nominate some objects to be in charge of consistency
for the others.

Our model currently only has the concept of `Batch` and `OrderLine`, both of which
are collections.  We need some kind of parent object to hold references to them.
Some sort of `Order` object might suggest itself, but that's more about order lines,
and we're more concerned about something that provides some sort of conceptual unity
for collections of batches.

When we allocate an order line, we're actually only interested in all the batches
that have the same SKU as the order line.  Some sort of concept of `GlobalSkuStock`
or perhaps just simply `Product` -- after all, that was the first concept we
came across in our exploration of the domain language back in <<chapter_01_domain_model>>.

Let's go with that for now, and see how it looks


[[product_aggregate]]
.Our chosen Aggregate, Product (src/allocation/model.py)
====
[source,python]
----
class Product:

    def __init__(self, sku: str, batches: List[Batch], version_number: int = 0):
        self.sku = sku  #<1>
        self.batches = batches  #<2>
        self.version_number = version_number  #<3>

    def allocate(self, line: OrderLine) -> str:  #<4>
        try:
            batch = next(
                b for b in sorted(self.batches) if b.can_allocate(line)
            )
            batch.allocate(line)
            self.version_number += 1
            return batch.reference
        except StopIteration:
            raise OutOfStock(f'Out of stock for sku {line.sku}')
----
====

<1> Product's main identifier is the `sku`
<2> It hold a reference to a collection of `batches` for that sku
<3> We'll talk about `version_number` a little later
<4> And finally, we can move the `allocate()` domain service to
    being a method on `Product`.


=== 1 Aggregate = 1 Repository


[[new_uow_and_repository]]
.Our new UoW and Repository (unit_of_work.py and repository.py)
====
[source,python]
[role="skip"]
----
class _UnitOfWork:
    def __init__(self, session):
        self.session = session
        self.products = repository.ProductRepository(session)


#...

class ProductRepository:
    #...

    def get(self, sku):
        return self.session.query(model.Product) \
                           .filter_by(sku=sku) \
                           .with_for_update() \
                           .first()
----
====


bla

=== Version numbers

Why:  basically to have a way of marking the aggregate and its associated batches as having changed.  data integrity.

3 options:

1. version number lives in domain, add to product constructor
2. services layer could do it
3. the uow + repository could do it by magic

Options 2 and 3 are a bit crap so we'll do 1. 



=== Testing for our data integrity rules

[[id_here]]
.Listing title
====
[source,python]
----
def test_integrity_of_concurrent_updates_to_product_version(postgres_session_factory):
    sku, batch = random_ref('s'), random_ref('b')
    session = postgres_session_factory()
    session.execute(
        "INSERT INTO products (sku, version_number) VALUES (:sku, 3)",
        dict(sku=sku),
    )
    session.execute(
        'INSERT INTO batches (reference, sku, _purchased_quantity, eta)'
        " VALUES (:batch, :sku, 100, null)",
        dict(batch=batch, sku=sku),
    )
    session.commit()
    exceptions = []
    o1, o2 = random_ref('o1'), random_ref('o2')
    target1 = lambda: try_to_allocate(o1, sku, postgres_session_factory, exceptions)
    target2 = lambda: try_to_allocate(o2, sku, postgres_session_factory, exceptions)
    t1 = threading.Thread(target=target1)
    t2 = threading.Thread(target=target2)
    t1.start()
    t2.start()
    t1.join()
    t2.join()
    [[version]] = session.execute(
        "SELECT version_number FROM products WHERE sku=:sku",
        dict(sku=sku),
    )
    assert version == 5
    assert exceptions == []
    orders = list(session.execute(
        "SELECT orderid FROM allocations"
        " JOIN batches ON allocations.batch_id = batches.id"
        " JOIN order_lines ON allocations.orderline_id = order_lines.id"
        " WHERE order_lines.sku=:sku",
        dict(sku=sku),
    ))
    orders = set([orders[0][0], orders[1][0]])
    assert orders == {o1, o2}
----
====





[[id_here]]
.Isolation level may not be enough (or even work!)
====
[source,python]
[role="non-head"]
----
default_session_factory = sessionmaker(bind=create_engine(
    config.get_postgres_uri(),
    isolation_level="SERIALIZABLE"
))
----
====




[[id_here]]
.SELECT FOR UPDATE, otoh, is your friend.
====
[source,python]
----
    def get(self, sku):
        return self.session.query(model.Product) \
                           .filter_by(sku=sku) \
                           .with_for_update() \
                           .first()
----
====


TODO: get story straight on these two



.Recap: Aggregates and consistency boundaries
*****************************************************************
Choose the right aggregate::
    bla

Something something transactions::
    bla bla.

*****************************************************************
