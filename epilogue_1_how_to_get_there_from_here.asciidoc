[[epilogue_1_how_to_get_there_from_here]]
== Epilogue: How Do I Get There From Here?

OK Bob and Harry, that's all well and good, and if I ever get hired to work
on a green-field new service, I know what to do.  But in the meantime, I'm
here with my big ball of Django mud, and I don't see any way to get to your
nice, clean, virginal, perfect, untainted, simplistic model.  Not from here.

// (DS) - could "virginal" be offensive?  not to me, but, you know, it doesn't
// need it...


NOTE: TODO, chapter under construction

OK, but how do I get there from here?

1. Option 1: carve out microservices one by one
2. Option 2: refactoring inside your monolith

In either case, you'll need to figure out what the correct
https://martinfowler.com/bliki/BoundedContext.html[Bounded Context]
is.

* fork the repo and delete stuff that's not in your bounded context
* strangler pattern.  can start with just an HTTP proxy
* what are peloton doing?


=== What do you want to achieve?

What's the problem with a monolith?

* Is it that there's no domain model because everything is trying to be all
  things to all people?

--> you need to carve out bounded contexts and probably microservices


* Is it that all the logic is hard to find because it's mixed between all the
  layers?

--> try to move towards Domain Model  and Service Layer.


// (DS) the big benefit of our monolith, which has always caused pushback
// at the mention of breaking it up, is that other people in the company can do
// clever things with the data,  which is all in one place.



=== A django story

* introducing a Service Layer first
    - define use cases
    - messagebus can come later
    - push all the logic down into the models

* once we have rich django models
    - migrate them one by one to POPO classes
    - add repository to translate
    - => now we can refactor the model (semi/more) independently from the DB

* and we can keep going and add UoW and a messagebus
    - now we have the event-driven / command handler pattern
    - almost any business requirement can be decomposed sensibly

see <<appendix_django>>



=== an event-driven approach to go microservices via strangler pattern

* decide on a piece of the old system to carve out.
* get your system to produce events
    - as its main outputs
    - and as inputs to your new system
* consume them in your new service. we now have a separate db and bounded context
* the new system produces
    - either the same events the old one did (and we can switch those old parts off)
    - or new ones, and we switch over the downstream things progressively



//TODO: event capture and all that jazz

=== More required reading

* _Monolith to Microservices_ by Sam Newman, and his original book,
   _Building Microservices_

Stangler (Fig) pattern is mentioned as a favorite, also many others.

////
TODO (DS)
Missing pieces

What's still worth doing, even in half measures? E.g. is it worth having a
service layer even if the domain is still coupled to persistence? Repositories
without CQRS?

What size of systems are these helpful within? For example, do they work in the context of a monolith?

How should use cases interact across a larger system? For example, is it a
problem for a use case to call another use case?

Is it a smell for a use case to interact with multiple repositories, and if so,
why?

How do read-only, but business logic heavy things fit into all this? Use cases
or not? (This relates to what these patterns might look like if we didn't
bother with CQRS.)
////


=== Footguns

This is a part 2 thing really, but basically, don't sally forth and implement
your own event-driven microservices architecture without reading lots, lots
more on the subject.

https://martinfowler.com/books/eip.html[Enterprise Integration Patterns] by
(as always) Martin Fowler is a pretty good start.


//TODO: add some footgun examples.

