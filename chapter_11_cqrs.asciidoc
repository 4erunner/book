[[chapter_11_cqrs]]
== Command-Query Responsibility Separation (CQRS)

In this chapter we're going to take a fairly uncontroversial insight--the
fact that reads (commands) and writes (queries) are different, and so they
should be treated differently--and we're going to push that insight out way
beyond the bounds of sanity and into full boomtown architecture-astronaut
crazyland.  We may provide a few justifications along the way of when you
might or might not want to do it, bla-bla-bla-performance and so forth, but,
honestly, it's just because we want to see the world burn.  In a decoupled way.

NOTE: Chapter under construction.  More sober and coherent treatment of the subject
    may be found at https://io.made.com/commands-and-queries-handlers-and-views/

So strap in, and see if you can spot the moment where the madness descends,
because you'll need to be able to spot that moment in your own life.


=== Always Redirect After a POST

If you've been doing web development, you're probably familiar with the convention
to return a 302-redirect from a POST request.  That's an example of
Command-Query Separation (CQS), which is at the sane end of the CQRS spectrum.

For an API, redirects don't apply, but the principle of POST-Redirect-GET
is still a good one, and we're currently breaking that rule, because our
`allocate` endpoint currently returns the batch ID.  Let's change it
to return a simple OK message, and instead provide a new read-only
endpoint to retrieve allocation state:


[[api_test_does_get_after_post]]
.API test does a GET after the POST (tests/e2e/test_api.py)
====
[source,python]
----
@pytest.mark.usefixtures('postgres_db')
@pytest.mark.usefixtures('restart_api')
def test_happy_path_returns_202_and_batch_is_allocated():
    orderid = random_orderid()
    sku, othersku = random_sku(), random_sku('other')
    batch1, batch2, batch3 = random_batchref(1), random_batchref(2), random_batchref(3)
    api_client.post_to_add_batch(batch1, sku, 100, '2011-01-02')
    api_client.post_to_add_batch(batch2, sku, 100, '2011-01-01')
    api_client.post_to_add_batch(batch3, othersku, 100, None)

    r = api_client.post_to_allocate(orderid, sku, qty=3)
    assert r.status_code == 202

    r = api_client.get_allocation(orderid)
    assert r.ok
    assert r.json() == [
        {'sku': sku, 'batchref': batch2},
    ]


@pytest.mark.usefixtures('postgres_db')
@pytest.mark.usefixtures('restart_api')
def test_unhappy_path_returns_400_and_error_message():
    unknown_sku, orderid = random_sku(), random_orderid()
    r = api_client.post_to_allocate(
        orderid, unknown_sku, qty=20, expect_success=False,
    )
    assert r.status_code == 400
    assert r.json()['message'] == f'Invalid sku {unknown_sku}'

    r = api_client.get_allocation(orderid)
    assert r.status_code == 404
----
====


OK what might the flask app look like?


[[flask_app_calls_view]]
.Endpoint for viewing allocations (src/allocation/flask_app.py)
====
[source,python]
----
from allocation import commands, exceptions, messagebus, orm, unit_of_work, views
...

@app.route("/allocations/<orderid>", methods=['GET'])
def allocations_view_endpoint(orderid):
    uow = unit_of_work.SqlAlchemyUnitOfWork()
    result = views.allocations(orderid, uow)  #<1>
    if not result:
        return 'not found', 404
    return jsonify(result), 200
----
====

<1> All right, a _views.py_, fair enough, we can keep read-only stuff in there,
    and it'll be a real views.py, not like Django's, something that knows how
    to build read-only views of our data...


=== Hold on to Your Lunch Folks.

So we can probably just add a list method to our existing repository
obj-...


[[views_dot_py]]
.Views do... raw sql??? (src/allocation/views.py)
====
[source,python]
[role="non-head"]
----
from allocation import unit_of_work

def allocations(orderid: str, uow: unit_of_work.SqlAlchemyUnitOfWork):
    with uow:
        results = list(uow.session.execute(
            'SELECT ol.sku, b.reference'
            ' FROM allocations AS a'
            ' JOIN batches AS b ON a.batch_id = b.id'
            ' JOIN order_lines AS ol ON a.orderline_id = ol.id'
            ' WHERE ol.orderid = :orderid',
            dict(orderid=orderid)
        ))
    return [{'sku': sku, 'batchref': batchref} for sku, batchref in results]
----
====

WHAT THE ACTUAL F?  ARE YOU GUYS TRIPPING F-ING BALLS?

Yes.  Yes we are.  Obviously don't do this.  Unless you have Reasons (TM). Let's come
back to that and assume you don't.  You probably don't.  Go ahead and do
something sane instead:


[[view_using_repo]]
.A simple view that uses the repository (src/allocation/views.py)
====
[source,python]
[role="skip"]
----
from allocation impor  standalone:
    build:
      context: standalone
    image: docker.made.com/selenium/selenium-standalone:${GIT_COMMIT:-snapshot}
    shm_size: 1G
t unit_of_work

def allocations(orderid: str, uow: unit_of_work.AbstractUnitOfWork):
    with uow:
        products = unit_of_work.products.for_order(orderid=orderid)
        batches = [b for p in products for b in p.batches]
    return [{'sku': b.sku, 'batchref': b.batchref} for b in batches]
----
====

And we're sure you can figure out how to write a query on your UoW
that can find all the products for an order.

Note that splitting out a _views.py` module and enforcing a clear
distinction between reads and writes in your application is still
probably a good idea.  We apply the CQS principle (with no R it's
Command-Query-Separation), and it's easy to see which code modifies
state (the event handlers) and which code just retrieves read-only
state (the views).

TIP: Split out your read-only views from your state-modifying
    command and event handlers.


=== Why On Earth Would You Write Raw SQL In Your Views?

OK Bob and Harry, let's get back to that SQL monstrosity though.  Why
on earth would you show us that?  Don't think we're about to forget, the
sheer horror has been permanently burned into our memories.  Why on
earth would you want to do that? _Ever?_

Broadly speaking there are two reasons:

* Performance
* And keeping your Domain Model free of spurious concerns.


==== SELECT N+1

The so-called
https://secure.phabricator.com/book/phabcontrib/article/n_plus_one/[SELECT N+1]
problem is a common performance issues with ORMs: when retrieving a list of
objects, your ORM will often perform an initial query to, say, get all the IDs
of the objects it needs, and then issue individual queries for each object to
retrieve their attributes.  This is especially likely if there are any foreign
key relationships on your objects.



=== Performance reasons

Now,
allow us to explain some possible places where this total insanity might make
a shred of sense.

* Link to CQRS paper
* SELECT N+1



=== Testing CQRS views

btw you can test this stuff. note that it can't be unit tested, because it
needs a real db, it's an integration test!  Just another anti-feather in the
anti-cap of this total anti-pattern.


[[integration_testing_views]]
.An integration test for a view (tests/integration/test_views.py)
====
[source,python]
----
from datetime import date
from allocation import commands, unit_of_work, messagebus, views


def test_allocations_view(sqlite_session_factory):
    uow = unit_of_work.SqlAlchemyUnitOfWork(sqlite_session_factory)
    messagebus.handle(commands.CreateBatch('b1', 'sku1', 50, None), uow)
    messagebus.handle(commands.CreateBatch('b2', 'sku2', 50, date.today()), uow)
    messagebus.handle(commands.Allocate('o1', 'sku1', 20), uow)
    messagebus.handle(commands.Allocate('o1', 'sku2', 20), uow)

    assert views.allocations('o1', uow) == [
        {'sku': 'sku1', 'batchref': 'b1'},
        {'sku': 'sku2', 'batchref': 'b2'},
    ]
----
====


=== Doubling Down on the Madness.

that hardcoded sql query is pretty ugly right?  what if we made it nicer
by keeping a totally separate, denormalised datastore for our view model?

Horrifying, right? wait 'til we tell you we're not even going to use postgres
or triggers or anything known and reliable and boring like that to keep it
up to date.  We're going to use our amazing event-driven architecture!
That's right!  may as well join the cult and start drinking folks, the ship
is made of cardboard and the captains are crazy and there's nothing you can
do to stop them.


[[much_nicer_query]]
.A much nicer query (src/allocation/views.py)
====
[source,python]
----
def allocations(orderid: str, uow: unit_of_work.SqlAlchemyUnitOfWork):
    with uow:
        results = list(uow.session.execute(
            'SELECT sku, batchref FROM allocations_view WHERE orderid = :orderid',
            dict(orderid=orderid)
        ))
        ...
----
====

Here's our table.  Hee hee hee, no foreign keys, just strings, yolo

[[new_table]]
.A very simple table (src/allocation/orm.py)
====
[source,python]
----
allocations_view = Table(
    'allocations_view', metadata,
    Column('orderid', String(255)),
    Column('sku', String(255)),
    Column('batchref', String(255)),
)
----
====

We add a second handler to the `Allocated` event:

[[new_handler_for_allocated]]
.Allocated event gets a new handler (src/allocation/messagebus.py)
====
[source,python]
----
EVENT_HANDLERS = {
    events.Allocated: [
        handlers.publish_allocated_event,
        handlers.add_allocation_to_read_model
    ],
----
====



Here's what our update-view-model code looks like:


[[update_view_model_1]]
.Update on allocation (src/allocation/handlers.py)
====
[source,python]
----

def add_allocation_to_read_model(
        event: events.Allocated, uow: unit_of_work.SqlAlchemyUnitOfWork,
):
    with uow:
        uow.session.execute(
            'INSERT INTO allocations_view (orderid, sku, batchref)'
            ' VALUES (:orderid, :sku, :batchref)',
            dict(orderid=event.orderid, sku=event.sku, batchref=event.batchref)
        )
        uow.commit()
----
====


And it'll work!


(OK you'll also need to handle deallocated:)


[[handle_deallocated_too]]
.A second listener for read model updates
====
[source,python]
[role="skip"]
----
events.Deallocated: [
    handlers.remove_allocation_from_read_model,
    handlers.reallocate
],

...

def remove_allocation_from_read_model(
        event: events.Deallocated, uow: unit_of_work.SqlAlchemyUnitOfWork,
):
    with uow:
        uow.session.execute(
            'DELETE FROM allocations_view '
            ' WHERE orderid = :orderid AND sku = :sku',
----
====

=== But Whyyyyyyy?

OK.  horrible, right? But also, kinda, surprisingly nice, considering? Our
events and message bus give us a really nice place to do this sort of stuff,
_if we need to_.

And think how easy it'd be to swap our read model from postgres to redis?
super-simple.  _We don't even need to change the integration test_.

TODO: demo this.


So definitely don't do this. ever.  But, if you do need to, see how easy
the event-driven model makes it?

OK.  On that note, let's sally forth into our final chapter.
