[[chapter_03]]
== Our first use case:  Flask API and service layer.

Like any good agile team, we're hussling to try and get an MVP out and
in front of the users to start gathering feedback.  We have the core
of our domain model and the domain service we need to allocate orders,
and we have the Repository interface for permanent storage.

Let's try and plug all the moving parts together as quickly as we
can, and then refactor towards a cleaner architecture.


=== A first end-to-end (E2E) test

No-one is interested in getting into a long terminology debate about what
counts as an E2E test vs a functional test vs an acceptance test vs an
integration test vs unit tests.  Different projects need different combinations
of tests, and we've seen perfectly successful projects just split things into
"fast tests" and "slow tests".

For now we want to write one or maybe two tests that are going to exercise
a "real" API endpoint (using HTTP) and talk to a real database. Let's call
them end-to-end tests because it's one of the most self-explanatory names.

<<first_api_test>> shows a first cut:




[[first_api_test]]
.A first API test (test_api.py)
====
[source,python]
----
def random_ref():
    return uuid.uuid4().hex[:10]

@pytest.mark.usefixtures('restart_api')
def test_api_returns_allocation_info(add_stock):
    sku1, sku2 = random_ref(), random_ref()
    add_stock([
        ('warehouse', sku1, 100),
        ('shipment1', sku1, 100),
        ('shipment2', sku2, 100),
    ])
    data = {
        'order_reference': random_ref(),
        'lines': {sku1: 3, sku2: 12},
    }
    url = get_api_url()
    r = requests.post(f'{url}/allocate', json=data)
    assert r.status_code == 201
    assert r.json()[sku1] == 'warehouse'
    assert r.json()[sku2] == 'shipment2'
----
====

Everyone solves these problems in different ways, but you're going
to need some way of spinning up Flask, possibly in a container, and
also talking to a postgres database.  If you want to see how we did
it, check out TODO: repo tag


Implementing things in the most obvious 
You mig



[[first_cut_flask_app]]
.First cut flask app (flask_app.py)
====
[source,python]
----
orm.start_mappers()
get_session = sessionmaker(bind=create_engine(config.get_postgres_uri()))


app = Flask(__name__)

@app.route("/allocate", methods=['POST'])
def allocate_endpoint():
    try:
        session = get_session()
        warehouse = repository.WarehouseRepository(session).get()
        shipments = repository.ShipmentRepository(session).list()
        order = domain_model.Order(request.json['order_reference'], request.json['lines'])

        allocation = domain_model.allocate(order, warehouse, shipments)

        repository.AllocationRepository(session).add(allocation)
        session.commit()
        return jsonify({l.sku: l.source.reference for l in allocation.lines}), 201
    finally:
        session.close()
----
====

