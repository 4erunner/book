[[chapter_01]]
== Domain modelling

In the prologue, we used the term "business logic layer" to describe the
central layer of a three-layered architecture. For the rest of the book we're
going to use the term "domain model" instead. This is a term from the DDD
community that does a better job of capturing our intended meaning.


=== What is a domain model?

The "domain" is a fancy way of saying "the problem you're trying to solve". I
currently work for an online retailer of furniture. Depending on which system
I'm talking about, the domain might be purchasing and procurement, or product
design, or logistics and delivery. Most programmers spend their days trying to
improve or automate business processes; the domain is the set of activities
that those processes support.

A model is a map of a process or phenomenon that captures some useful property.
Humans are exceptionally good at producing models of things in their heads. For
example, when someone throws a ball toward you, you're able to predict its
movement almost unconsciously, because you have a model of how objects move in
space. Your model isn't perfect by any means. Humans have terrible intuitions
about how objects behave at near-light speeds or in a vacuum because our model
was never designed to cover those cases. That doesn't mean the model is wrong,
but it does mean that some predictions fall outside of its domain.


.This is not a DDD book.  You should read a DDD book.
*****************************************************************
Domain-Driven Design, or DDD, is where the concept of domain modelling came
from, and it's been a hugely successful movement in transforming the way people
design software by focusing on the core business domain.  Many of the
architecture patterns that we cover in this book, like Entity, Aggregate and
Value Objects (see <<chapter_04>>), Repository (in <<chapter_02,the next
chapter>>) all come from the DDD tradition.

This book really can't give a proper overview of the DDD philosophy, and the
associated tools and techniques for developing a domain model.  We really hope
to give you a taste for it though, and cannot encourage you enough to go on and
read a proper DDD book.

* The original https://domainlanguage.com/ddd/[DDD "blue book"] by Eric Evans
* Or some people seem to prefer the https://amzn.to/2tidSLb["red book"], by
  Vaughn Vernon

*****************************************************************

The domain model is the mental map that business owners have of their
processes. All business people have these mental maps, they're how humans think
about complex processes. [TODO: Listening for business jargon].

We're going to use a real-world domain model throughout this book, specifically
a model from our current employment. Made.com are a successful furniture
retailer. When you buy a sofa or a coffee table, we have to figure out how best
to get your goods to your home.

* TODO: [Context diagram for allocation]

At a high level, we have separate systems that are responsible for buying
stock, selling stock to customers, and shipping goods to customers. There's a
system in the middle that needs to coordinate the process by allocating stock
to a customer's orders. 

For the purposes of this book, we're imagining a situation where the business
decide to implement an exciting new way of allocating stock.  Until now, the
business has been presenting stock and lead times based on what is physically
available in the warehouse.  If and when the warehouse runs out, a product is
listed as "out of stock" until the next shipment arrives from the manufacturer.

The innovation is: if we have a system that can keep track of all our shipments
and when they're due to arrive, then we can treat the goods on those ships as
real stock, and part of our inventory, just with slightly longer lead times.
Fewer goods will appear to be out of stock, we'll sell more, and the business
can save money by keeping lower inventory in the domestic warehouse.

But allocating orders is no longer a trivial matter of decrementing a single
quantity in the warehouse system.  We need a more complex allocation mechanism.
Time for some domain modelling.


=== Exploring the domain language

Talking to the business, we might derive a summary that looks something like
this.  As we do so, we're looking to build a domain language (the _"ubiquitous
language"_ in DDD terminology) in which to express the key concepts in code,
as well as in real life.

* _Customers_ place _orders_. An order has multiple _order lines_, where each
  line refers to a _SKU_ and a _quantity_, eg. 10 units of RED-CHAIR, or 1 unit
  of TASTELESS-LAMP.
* A _SKU_ or "Stock Keeping Unit", is a unique id representing a specific
  product.
* The purchasing department order _Shipments_ of stock. A _Shipment_ also
  consists of a number of different _quantities_ of particular _products_.  It
  has an _ETA_, estimate time of arrival.
* When a shipment arrives and is unloaded, it becomes "normal" _Warehouse_
  Stock, still inventoried by _SKU_ and _quantity_.
* When we allocate an order to warehouse stock or to a shipment, the _available
  quantity_ should be reduced correspondingly; you can't allocate more than the
  _available quantity_
* The business wants to allocate in such a way as to minimise lead times for
  individual customers, so allocate to warehouse stock in preference to
  shipments, and then allocate to shipments in order of their _ETA_


Why not have a go at solving this problem yourself?  Write a few unit tests and
see if you can capture the essence of these business rules in some nice, clean
code.


=== Unit testing Domain Models.

If you're anything like us, you might have ended up with some tests a little like this:

[[unit_tests]]
.A first set of unit tests
====
[source,python]
----
def test_can_allocate_to_warehouse():
def test_can_allocate_to_shipment():
def test_ignores_irrelevant_warehouse_stock():
def test_can_allocate_to_correct_shipment():
def test_allocates_to_warehouse_in_preference_to_shipment():
def test_can_allocate_multiple_lines_to_warehouse():
def test_can_allocate_multiple_lines_to_shipment():
def test_can_allocate_to_both():
def test_can_allocate_to_both_preferring_warehouse():
def test_allocated_to_first_suitable_shipment_in_list():
def test_still_preserves_ordering_if_split_across_shipments():
def test_warehouse_not_quite_enough_means_we_use_shipment():
def test_cannot_allocate_if_insufficent_quantity_in_warehouse():
def test_cannot_allocate_if_insufficent_quantity_in_shipment():
----
====


Let's take a look at an example test

[[example_unit_test]]
.Example unit test
====
[source,python]
----
def test_allocates_to_stock_in_preference_to_shipment():
    order = Order({'sku1': 10})
    stock = Stock({'sku1': 1000})
    shipment = Shipment({'sku1': 1000}, eta=tomorrow)

    order.allocate(stock, shipments=[shipment])

    assert order.allocation.sources['sku1'] == stock
    assert stock.quantities['sku1'] == 990
    assert shipment.quantities['sku1'] == 1000
----
====

The name of our unit test describes the behaviour that we want to see from the system, and the names of the classes and variables are taken from the business jargon or "ubiquitous language", in DDD terms. We could show this code to a non-technical co-worker, and he would agree that this correctly describes the behaviour of the system.
//TODO: agree policy on he vs she in text



==== Writing Pythonic Domain Models.

What kind of model did you come up with?

Maybe, like Harry, you went down a minimal path -- orders, stock and shipments
are all just mappings, `{sku: quantity}`, so they can be plain old dicts.  Our
entire domain model can consist of one primary function called `allocate`,
which takes a dict representing the order, a list of dicts for warehouse and
shipments, and returns a dict mapping `sku` to `warehouse or shipment`
instances, to represent the allocation.

[[dict_model]]
.A minimal, procedural/functional model
====
[source,python]
----
def allocate(order, warehouse, shipments):
    allocation = {}
    for source in shipments + [warehouse]:
        allocation.update(allocation_from(order, source))
    return allocation

def allocation_from(order, source):
    return {
        sku: source
        for sku, quantity in order.items()
        if sku in source
        and source[sku] > quantity
    }
----

This minimal dict-based model only really works if you rule sorting by ETA to
be out of scope (shipments are assumed to be sorted already), and you assume
that someone else is in charge of actually decrementing quantities.  But the
point is that thinking about the problem domain without immediately involving
classes can actually get you pretty far.  For example, the choice of dict as
the fundamental data type for stock, order and allocation is probably useful.

If the core of the domain really is an algorithm, you can actually capture
quite complex requirements this way too.  Here's a draft from an earlier
version of the book, where there was an additional requirement that orders
should be allocated to a single source if possible:


[[dict_model_with_well_named_functions]]
.Using domain language in a functional model
====
[source,python]
----
def allocate(order, warehouse, shipments):
    allocations = []
    for source in [warehouse] + shipments:
        allocation = allocate_to(order, source)
        if allocated_completely(order, allocation):
            return allocation
        allocations.append(allocation)
    return combine_preferring_first(allocations)

def allocate_to(order, source):
    return {
        sku: source
        for sku, quantity in order.items()
        if sku in source
        and source[sku] > quantity
    }

def allocated_completely(order, allocation):
    return order.keys() == allocation.keys()

def combine_preferring_first(allocations):
    return {
        k: v
        for d in reversed(allocations)
        for k, v in d.items()
    }
----
====

Note that the code isn't completely minimal however--the total amount of code
is probably low enough that we could have delivered everything in a single
function, but by factoring out helper functions like `allocate_to` and
`allocated_completely` (which is only a one-liner), we've tried as much as
possible to express the algorithm in terms of the business domain.

TIP: Even when investigating functional/procedural solutions, use domain
    language wherever possible


==== OO Design

But for most domain modelling problems, an object-oriented approach is usually
going to be the way to go.

// On the other hand, perhaps like Bob you leaned more naturally towards an OO solution.  You might have anticipated that such an anaemic model will be hard to read in 6 months' time. We haven't really fully translated the language of the domain into our model.  How about something like this instead?


If you've done a bit of modelling using primitive data types, it can be
tempting to go down a path like this:


[[id_here]]
.Starting on an OO path, but everything is still a dict
====
[source,python]
----
def allocate(order, warehouse, shipments):
    ordered_sources = [warehouse] + sorted(shipments)
    allocation = {}
    for source in reversed(ordered_sources):
        allocation.update(source.allocation_for(order))
    allocation.decrement_available_quantities()
    return allocation


class Order(dict):
    # ...


class _Stock(dict):

    def allocation_for(self, order):
        return {
            sku: self
            for sku, quantity in order.items()
            if sku in self
            and self[sku] > quantity
        }


class Warehouse(_Stock):
    pass



class Shipment(_Stock):

    def __init__(self, d, eta):
        self.eta = eta
        super().__init__(d)

    def __lt__(self, other):
        return self.eta < other.eta
----
====

TODO: aside on allocate still being a function.  not everything has to be a
    class.  _Domain Service_ in DDD terms

Moving to an object-oriented model is buying us lots of things here, and Python helps us do it
in a nice, expressive way. Shipments now have an ETA, and we can use the
`__lt__` magic function to make them sortable.  We identify a common parent class for warehouse
stock and shipment stock, and we can give it some behaviour -- it knows how to build a partial
allocation.

However, subclassing `dict` isn't usually going to be a good idea.  Domain models aren't usually
going to inherit from existing primitive types (unless they're _Value Objects_, more on this in
<<chapter_03>>).

Harry's made the classic _is-a_ vs _has-a_ conflation.  Should a shipment _be_ a dict?  Do we
really want it to have all the attributes and methods a dict has?  What would it mean to call
`.update()` on a shipment?  Or even if you can figure out some reasonable semantics for that,
what about `.values()` or `.keys()`?  Those really don't have any meaning in the terminology
of the domain.

A dict might be the right data structure to store information about the content of a shipment,
but a Shipment should _have_ a dict rather than _be_ one:


```
[[oo_model]]
.Has-a vs Is-a
====
[source,python]
----
class _Lines:

    def __init__(self, lines: dict):
        self._lines = lines

    def __getitem__(self, sku):
        return self._lines[sku]

    def __contains__(self, sku):
        return sku in self._lines


class Order(_Lines):
    pass
----
====

TODO: update listing above for new duck-typing approach

The `_Lines` base class, which is used by `Order`, `Warehouse` and `Shipment`, lets its subclasses
use _some_ dict methods, the ones that make semantic sense in the domain.  "getting" a sku from
an order means retrieving the quantity ordered for that sku.  Checking if a sku is `in` an order is
also meaningful.  But other dict methods like `.update()` and `.values()` don't have a clear or
unambiguous meaning, so those methods aren't supported.

// TODO aside on Line dataclass and modifying iteration



[[id_here]]
.allocate is still a function, but we have a richer model for an Allocation
====
[source,python]
----
def allocate(order, warehouse, shipments):
    ordered_sources = [warehouse] + sorted(shipments)  #<3>
    allocation = Allocation(order)  #<2>
    for source in ordered_sources:
        allocation.supplement_with(source.allocation_for(order))  #<3>
    allocation.decrement_available_quantities()  #<4>
    return allocation


class Allocation:

    def __init__(self, order):  #<2>
        self.order = order
        self._sources = {}  #<1>

    def __getitem__(self, sku):  #<1>
        return self._sources[sku]

    def __contains__(self, sku):  #<1>
        return sku in self._sources

    def with_sources(self, sources: dict):  #<5>
        self._sources = sources
        return self

    def supplement_with(self, other: Allocation):  #<3>
        for sku, source in other._sources.items():
            if sku not in self:
                self._sources[sku] = source

    def decrement_available_quantities(self):  #<4>
        for sku, source in self._sources.items():
            source.decrement_available(sku, self.order[sku])
----
====

<1> An allocation _has_ sources, and we use similar duck-typing methods to
    support checking whether a sku is in an allocation, and retrieving the
    source for a particular sku.  

<2> An allocation is always _for_ an order,
    so it's a required argument in the constructor.

<3> We can also build some nice, meaningful helper methods. _supplement_with_
    makes our algorithm for building up an allocation from several different
    smaller allocations more readable. The top-level `allocate` function no
    longer needs to use the hack of reversing the sources list so that
    `dict.update()` works, giving preference to the last source in the list.
    Instead, an allocation knows how to conditionally supplement itself.

<4> `decrement_available_quantities` and `decrement_available` on individual
    Stock objects similarly encapsulates the knowledge about how to make
    quantity updates

<5> `with_sources` uses method chaining to make a nice, readable syntax
    for the individual `Stock` objects to be able to build up an allocation



[[id_here]]
.Listing title
====
[source,python]
----

class _Stock(_Lines):

    def decrement_available(self, sku, qty):
        self._lines[sku] -= qty

    def allocation_for(self, order: Order):
        return Allocation(order).with_sources({
            line.sku: self
            for line in order.lines
            if line.sku in self
            and self[line.sku] > line.qty
        })
----
====


.On Type hints
*******************************************************************************

TODO: sidebar on the good and bad.

*******************************************************************************

==== Datclasses are great for Value Objects (tbc?)

TODO: explain `line.sku` or change to using `.items()`

[[id_here]]
.Placeholder re: Line value object shall we keep it?
====
[source,python]
----
@dataclass
class Line:
    sku: str
    qty: int


class _Lines:
    #...

    @property
    def lines(self):
        return [
            Line(sku, qty)
            for sku, qty in self._lines.items()
        ]
----
====

could talk about...?

* value objects
* dataclass
* one day wanting to sum lines for total available quantity of a sku across all shipments


The core algorithm (in `allocate()`) is essentially the same, but this
model is much richer.  The key concepts of the business are represented,
the code uses the domain language and is thus likely to remain readable
in 6 months' time, and it actually delivers the requirements of sorting by ETA
and decrementing available quantities.

Perhaps you prefer one or the other. Maybe you'd start with the minimal
implementation and grow into a more complex one over time.  But either way,
the critical thing about the domain is that it captures the core understanding
of the business, and it should be the most important part of our code.  It's
the place where we want to have maximum flexibility in evolving over time.
It's the place where we expect to get the most value out of unit testing.
It's not something we want tied down with infrastructure constraints.

Refactoring from the Harry model to the Bob model took all of 2 hours. How
long do you think it would have taken if all the models were Django models,
tightly coupled to the database and any number of presentation concerns,
and the core algorithm was buried inside a view controller, surrounded by
authentication, validation and HTTP request/response transformation code?

=== Wrap-up

// IRL sources of complexity from Csaba:
// maybe one could be used as a further examples of when classes are useful
// * Made to Order
// * Hold Until
// * reallocate other orders after order cancelled??
// * grouped
// * countries

.Key things (example formatting for end-of-chapter glossary/recap)
*****************************************************************
Domain modelling::
    This is the part of your code that is closest to the business,
    the most likely to change, and the place where you deliver the
    most value to the business.  Make it easy to understand and modify

Not everything has to be an object::
    Python is a multi-paradigm language, so let the "verbs" in your
    code be functions.  Classes called "Manager" or "Builder" or
    "Factory" are a code smell.

This is the time to apply your best OO design principles::
    revise SOLID.  has-a vs is-a.  composition over inheritance. etc etc.

Datclasses for value objects::
    yes indeed.

*****************************************************************
