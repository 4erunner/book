[[chapter_09_commands]]
== Commands and Command Handler

//TODO get rid of bullets

.In this chapter
********************************************************************************

* We'll discuss the difference between _events_ and _commands_.
* We'll extend our message bus to handle command messages.
* We'll finish rebuilding our application as a message-processor.

  // DIAGRAM GOES HERE

********************************************************************************

In the previous chapter we talked about using events as a way of representing
the inputs to our system. This starts to turn our application into a message
processing machine.

TODO: DIAGRAM: Message processor

To achieve that, we converted all our use-case functions to event-handlers.
When the API receives a POST to create a new batch, it builds a new `BatchCreated`
event and handles it as though it came from an external system.
This might have felt counter-intuitive. After all, the batch _hasn't_ been
created yet, that's why we called the API. We're going to fix that conceptual
wart by introducing _Commands_.

=== Commands and Events

Like events, commands are a type of message - instructions sent by one part of
a system to another. Like events, we usually represent commands with dumb data
structures and we can handle them in much the same way.

The differences between them, though, are important.

Commands are sent by one actor to another specific actor with the expectation that
a particular thing will happen as a result. When I post a form to an API handler,
I am sending a command. We name commands with imperative tense verb phrases like
"allocate stock," or "delay shipment."

Commands capture _intent_. They express our wish for the system to do something.
As a result, when they fail, the sender needs to receive error information.

Events are broadcast by an actor to all interested listeners. When we publish the
`batch_quantity_changed` we don't know who's going to pick it up. We name events
with past-tense verb phrases like "order allocated to stock," or "shipment delayed."

We often use events to spread the knowledge about successful commands.

Events capture _facts_ about things that happened in the past. Since we don't
know who's handling an event, senders should not care whether the receivers
succeeded or failed.

[cols="e,a,a", frame="none"]
.Events vs Commands
|===
e|      e| Event e| Command
| Named | Past-Tense | Imperative Tense
| Error Handling | Fail independently | Fail noisily
| Sent to | All listeners | One recipient
|===


// TODO: Diagram of user "buy stock" -> "stock purchased"
//                       "create batch" -> "batch created"


What kinds of commands do we have in our system right now? 

[[commands_dot_py]]
.Pulling out some commands (src/allocation/commands.py)
====
[source,python]
----
class Command:
    pass

@dataclass
class Allocate(Command):  #<1>
    orderid: str
    sku: str
    qty: int

@dataclass
class CreateBatch(Command):  #<2>
    ref: str
    sku: str
    qty: int
    eta: Optional[date] = None

@dataclass
class ChangeBatchQuantity(Command):  #<3>
    ref: str
    qty: int
----
====

<1> `commands.Allocate` will replace `events.AllocationRequired`
<2> `commands.CreateBatch` will replace `events.BatchCreated`
<3> `commands.ChangeBatchQuantity` will replace `events.BatchQuantityChanged``

Each of the use-cases that we discussed earlier in the book is really a command,
an instruction for the system to try and do a thing. To unify the two halves of
the domain, we're going to make a simple change: instead of directly invoking
our use case functions, like we did before, we're going to take these
commands, and we're going to put them on the message bus. As a result, our
message bus changes somewhat.

[[new_messagebus]]
.Messagebus handles events and commands differently (src/allocation/messagebus.py)
====
[source,python]
----
Message = Union[commands.Command, events.Event]


def handle(message: Message, uow: unit_of_work.AbstractUnitOfWork):  #<1>
    if isinstance(message, events.Event):
        handle_event(message, uow)
    elif isinstance(message, commands.Command):
        return handle_command(message, uow)
    else:
        raise Exception(f'{message} was not an Event or Command')


def handle_event(event: events.Event, uow: unit_of_work.AbstractUnitOfWork):  #<2>
    for handler in EVENT_HANDLERS[type(event)]:
        try:
            print('handling event', event, 'with handler', handler, flush=True)
            handler(event, uow=uow)
        except:  #<2>
            print(f'Exception handling event {event}\n:{traceback.format_exc()}')
            continue


def handle_command(command, uow: unit_of_work.AbstractUnitOfWork):  #<3>
    print('handling command', command, flush=True)
    try:
        handler = COMMAND_HANDLERS[type(command)]
        return handler(command, uow=uow)
    except Exception as e:
        print(f'Exception handling command {command}: {e}')
        raise e  #<3>


EVENT_HANDLERS = {
    events.OutOfStock: [handlers.send_out_of_stock_notification],
}  # type: Dict[Type[events.Event], List[Callable]]  #<2>

COMMAND_HANDLERS = {
    commands.Allocate: handlers.allocate,
    commands.CreateBatch: handlers.add_batch,
    commands.ChangeBatchQuantity: handlers.change_batch_quantity,
}  # type: Dict[Type[commands.Command], Callable]  #<3>
----
====


<1> It still has a main `handle()` entrypoint, that takes a list of messages,
    that may be commands or events.

<2> We dispatch to a function for handling events.  It can delegate to multiple
    handlers per event, and it catches and logs any errors, but does not let them
    interrupt message processing.

<3> The command handler expects just one handler per command.  If any errors
    are raised, they fail hard and will bubble up.




Why does `handle_command` have a `return`, but `handle_events` doesn't, we hear
you ask?  It's so that we can return the batchref from the API.  

[[flask_uses_command]]
.Flask gets a response from the command handler (src/allocation/flask_app.py)
====
[source,python]
----
@app.route("/allocate", methods=['POST'])
def allocate_endpoint():
    try:
        cmd = commands.Allocate(
            request.json['orderid'], request.json['sku'], request.json['qty'],
        )
        uow = unit_of_work.SqlAlchemyUnitOfWork()
        batchref = messagebus.handle(cmd, uow)
    except exceptions.InvalidSku as e:
        return jsonify({'message': str(e)}), 400

    return jsonify({'batchref': batchref}), 201
----
====

It's the same wart we've drawn attention to before.  In <<chapter_11_cqrs>>
we'll look at a way of separating out command handling from read requests.

////
TODO (ej) Devil's advocate:  If your messagebus.handle processes half the events
     in the list, then drops the rest on the floor due to a db network outage
     or being OOM killed, how do you mitigate problems cause by the lost messages?
////

TODO: discussion, can events raise commands?
=== Events, Commands, and Error Handling

Many developers get uncomfortable at this point, and ask "what happens when an
event fails to process. How am I supposed to make sure the system is in a
consistent state?"

If we manage to process half of the events during `messagebus.handle` before an
out-of-memory error kills our process, how do we mitigate problems caused by the
lost messages?

Let's start with the worst case: we fail to handle and event, and the system is
left in an inconsistent state. What kind of error would cause this? Often in our
systems we can end up in an inconsistent state when only half an operation is
completed.

In our allocation service, though, we've already taken steps to prevent that
happening. We've carefully identified _Aggregates_ which act as consistency
boundaries, and we've introduced a _Unit of Work_ that manages the atomic
success or failure of an update to an aggregate.

By definition, we don't require two aggregates to be immediately consistent, so
if we fail to process an event, and only update a single aggregate, our system
can still be made eventually consistent. We shouldn't violate any constraints of
the system.

For example, when we allocate stock to an order, our consistency boundary is the
Product aggregate. This means that we can't accidentally over-allocate: either
a particular order line is allocated to the product, or it is not - there's no
room for inconsistent states.

 
* Sending an email shouldn't stop us taking your money
* Recovering from logs
* Using a job queue