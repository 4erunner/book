[[preface]]
[preface]
== Preface

=== Who are we and why are we writing this book?

Hi, I'm Harry.  At the end of my last book,
http://www.obeythetestinggoat.com/pages/book.html[Test-Driven Development with Python],
I found myself asking a bunch of questions about architecture -- what's the
best way of structuring your application so that it's easy to test?  More
specifically, so that your core business logic is covered by unit tests, and so
that we minimise the number of integration and end-to-end tests we need?  I
made vague references to "Hexagonal Architecture" and "Ports and Adapters" and
"Functional Core, Imperative Shell", but these weren't things I understood or
had done in practice.

And then I was lucky enough to run into Bob, who has the answers
to all these questions.

Hi, I'm Bob. I... //TODO

=== Why Python?

If you're reading this book, you probably don't need convincing of the merits
of Python itself.  So it's more "why does the world need a _Python_ book for
this?", or possibly "why does the _Python_ world need a book like this?"

The answer is about Python's popularity and maturity - although Python is
probably the world's fastest-growing programming language, and nearing the top
of the absolute popularity tables, it's only just starting to take on the kinds
of problems that the C# and Java world have been working on for years.
Startups become real businesses, web apps and scripted automations are becoming
(whisper it) enterprise software.

In the Python world, we often quote the Zen of Python:  "there should be
one--preferably on only one--obvious way to do it".  Unfortunately, as project
complexity grows, the most obvious way of doing things isn't always the way
that helps you manage complexity and evolving requirements.

None of the techniques and patterns we're going to discuss in this book are
new, but they are mostly new to the Python world.  And this book won't be
a replacement for the classics in the field like 
https://domainlanguage.com/ddd/[Evans' Domain-Driven Design]
or
https://www.martinfowler.com/books/eaa.html[Fowler's Patterns of Enterprise Application Architecture] (both of which we'll constantly refer to and encourage you to go and read).

But all the classic code examples in the literature do tend to be written in
Java or C\+\+/#, and if you're a Python person and haven't used either of those
languages in a long time (or indeed ever), it can make them quite trying.
There's a reason the latest edition of https://martinfowler.com/books/refactoring.html[Refactoring] is in JavaScript.

So we hope this book will make for a lightweight introduction to some
of the key architectural patterns that support Domain-Driven Design
(DDD) and event-driven microservices, that it will serve as a reference
for implementing them in a Pythonic way, and that it will serve as a
first step for those who want to do further research  in this field.


=== Outline

* Domain modelling, and why do we always make it so hard for ourselves?
* Persistence and the repository pattern
* Web API.  Our first use cases.  Flask as a port (as in ports-and-adapters). Orchestration/Service layer
* Data integrity 1: Unit of Work pattern
* Data integrity 2: Choosing the right consistency boundary (Aggregate pattern)
* Event-driven architecture part 1: Events and the Message Bus
* Event-driven architecture part 2: Event-driven Microservices.
* Command-Query Responsibility Segregation (CQRS) - separating read from write.
* Bootstapping and Dependency Injection


=== Conventions Used in This Book

The following typographical conventions are used in this book:

_Italic_:: Indicates new terms, URLs, email addresses, filenames, and file extensions.

+Constant width+:: Used for program listings, as well as within paragraphs to refer to program elements such as variable or function names, databases, data types, environment variables, statements, and keywords.

**`Constant width bold`**:: Shows commands or other text that should be typed literally by the user.

_++Constant width italic++_:: Shows text that should be replaced with user-supplied values or by values determined by context.


[TIP]
====
This element signifies a tip or suggestion.
====

[NOTE]
====
This element signifies a general note.
====

[WARNING]
====
This element indicates a warning or caution.
====

=== Using Code Examples
++++
<!--PROD: Please reach out to author to find out if they will be uploading code examples to oreilly.com or their own site (e.g., GitHub). If there is no code download, delete this whole section. If there is, when you email digidist with the link, let them know what you filled in for title_title (should be as close to book title as possible, i.e., learning_python_2e). This info will determine where digidist loads the files.-->
++++

Supplemental material (code examples, exercises, etc.) is available for download at link:$$https://github.com/oreillymedia/title_title$$[].

This book is here to help you get your job done. In general, if example code is offered with this book, you may use it in your programs and documentation. You do not need to contact us for permission unless you’re reproducing a significant portion of the code. For example, writing a program that uses several chunks of code from this book does not require permission. Selling or distributing a CD-ROM of examples from O’Reilly books does require permission. Answering a question by citing this book and quoting example code does not require permission. Incorporating a significant amount of example code from this book into your product’s documentation does require permission.

We appreciate, but do not require, attribution. An attribution usually includes the title, author, publisher, and ISBN. For example: “_Book Title_ by Some Author (O’Reilly). Copyright 2012 Some Copyright Holder, 978-0-596-xxxx-x.”

If you feel your use of code examples falls outside fair use or the permission given above, feel free to contact us at pass:[<a class="email" href="mailto:permissions@oreilly.com"><em>permissions@oreilly.com</em></a>].

=== O'Reilly Safari

[role = "safarienabled"]
[NOTE]
====
pass:[<a href="http://oreilly.com/safari" class="orm:hideurl"><em class="hyperlink">Safari</em></a>] (formerly Safari Books Online) is a membership-based training and reference platform for enterprise, government, educators, and individuals.
====

Members have access to thousands of books, training videos, Learning Paths, interactive tutorials, and curated playlists from over 250 publishers, including O’Reilly Media, Harvard Business Review, Prentice Hall Professional, Addison-Wesley Professional, Microsoft Press, Sams, Que, Peachpit Press, Adobe, Focal Press, Cisco Press, John Wiley & Sons, Syngress, Morgan Kaufmann, IBM Redbooks, Packt, Adobe Press, FT Press, Apress, Manning, New Riders, McGraw-Hill, Jones & Bartlett, and Course Technology, among others.

For more information, please visit http://oreilly.com/safari.

=== How to Contact O'Reilly

Please address comments and questions concerning this book to the publisher:

++++
<ul class="simplelist">
  <li>O’Reilly Media, Inc.</li>
  <li>1005 Gravenstein Highway North</li>
  <li>Sebastopol, CA 95472</li>
  <li>800-998-9938 (in the United States or Canada)</li>
  <li>707-829-0515 (international or local)</li>
  <li>707-829-0104 (fax)</li>
</ul>
++++

We have a web page for this book, where we list errata, examples, and any additional information. You can access this page at link:$$http://www.oreilly.com/catalog/<catalog page>$$[].

++++
<!--Don't forget to update the link above.-->
++++

To comment or ask technical questions about this book, send email to pass:[<a class="email" href="mailto:bookquestions@oreilly.com"><em>bookquestions@oreilly.com</em></a>].

For more information about our books, courses, conferences, and news, see our website at link:$$http://www.oreilly.com$$[].

Find us on Facebook: link:$$http://facebook.com/oreilly$$[]

Follow us on Twitter: link:$$http://twitter.com/oreillymedia$$[]

Watch us on YouTube: link:$$http://www.youtube.com/oreillymedia$$[]

=== Acknowledgments

++++
<!--Fill in...-->
++++
