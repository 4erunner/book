[[chapter_02]]
== Repository Pattern

We expect to be working in an agile manner, so our priority is to get to an MVP
as quickly as possible.  Once we've identified the first use case we want to
support and we've built a service in the domain for it (the `allocate()` function),
we want to start thinking about exposing it to users as quickly as possible.

In our case that's going to be a web API, and there's a good case for saying that,
in a real project, you might dive straight in with some end-to-end tests and
start plugging in a web framework, test-driving things outside-in.

But we know that, no matter what, we're going to need some form of persistent
storage, and this is a textbook, so we can allow ourselves a tiny bit more
bottom-up development, and start to think about storage and databases.


=== Applying the Dependency Inversion Principle to the Database

We're all reasonably familiar with the best practice for a system
with a UI, some logic, and a database:  the "layered architecture".


[[layered_architecture]]
.Layered Architecture
====
[source,text]
----
+------------------------------------------------------------+
|                  Presentation Layer                        |
+------------------------------------------------------------+
                          |
                          V
+------------------------------------------------------------+
|                   Business Logic                           |
+------------------------------------------------------------+
                          |
                          V
+------------------------------------------------------------+
|                    Database Layer                          |
+------------------------------------------------------------+
----
====

You might think of it as Model-View-Controller, and have more
layers, but the essential principle is to keep the layers
separate (which is a good thing), and to have each layer
depend only on the one below...

But we want our domain model to have _no dependencies whatsoever_.
We don't want infrastructure concerns bleeding over into our
domain model and slowing down our unit tests or our ability to
make changes.

Instead, as discussed in the prologue, we'll think of our
model as being on the "inside", and dependencies flowing
inwards to it;  what people sometimes call "ports and adapters".


.Is this Ports and Adapters?
*******************************************************************************
> "Is this Ports and Adapters?  Or is it hexagonal architecture?  Is it the same
> as the Onion architecture?  What about the Clean architecture?  What's a Port
> and what's an Adapter?  Why do you people have so many words for the same thing?

...we hear you ask.  The answer to all these questions is yes, pretty much. Well,
apart from the what-is-a-port-and-what-is-an-adapter question, which we'll
come back to later, but the short answer to that one is that it doesn't really
matter.

Although some people like to nitpick over the differences, all these are
pretty much names for the same thing, and they all boil down to the
Dependency Inversion Principle--high-level modules (the domain) should
not depend on low-level ones (the infrastructure).

We'll get into some of the nitty-gritty around "depending on abstractions",
and whether there is a Pythonic equivalent of interfaces, later in the book.
*******************************************************************************

==== The "normal" ORM way: model depends on ORM.

How to implement it when we want to use a tool like an ORM though?
We don't want to be hand-coding SQL (at least, not yet!).  But
if you follow the typical SQLAlchemy tutorial, you'll end up with
something like this:


[[typical_sqlalchemy_example]]
.Listing title
====
[source,python]
----
from sqlalchemy import Column, ForeignKey, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship

Base = declarative_base()

class Order(Base):
    id = Column(Integer, primary_key=True)

class OrderLine(Base):
    id = Column(Integer, primary_key=True)
    sku = Column(String(250))
    qty = Integer(String(250))
    order_id = Column(Integer, ForeignKey('order.id'))
    order = relationship(Order)

class Allocation(Base):
    #... and so on
----
====

....And our pristine model is now full of dependencies on the
ORM, and is starting to look ugly as hell.



==== Inverting the dependency: ORM depends on model.

But that's not the only way to use SQLAlchemy.  The alternative
is to define your schema separately, and an explicit _mapper_
for how to convert between the schema and our domain model:

https://docs.sqlalchemy.org/en/latest/orm/mapping_styles.html#classical-mappings


[[sqlalchemy_classical_mapper]]
.Explicit ORM Mapping with SQLALchemy Table objects
====
[source,python]
----
from sqlalchemy.orm import mapper, relationship
from domain_model import Order  #<1>


metadata = MetaData()

order = Table(
    'order', metadata,
    Column('id', Integer, primary_key=True, autoincrement=True),
)

order_lines = Table(
    'order_lines', metadata,
    Column('order_id', ForeignKey('order.id'), primary_key=True),
    Column('sku', String(255), primary_key=True),
    Column('qty', Integer),
)
#...


def start_mappers():
    mapper(Line, order_lines)  #<2>
    mapper(Order, order, properties={  #<2>
        'lines': relationship(Order.Line, cascade="all, delete-orphan")
    })
    #...
----
====

<1> The ORM imports the domain model, and not the other way around
<2> And when we call the `mapper` function, SqlAlchemy binds our
    domain model classes to the various tables we've defined.

This gives us all the benefits of SQLAlchemy, including the ability
to use _alembic_ for migrations, and the ability to transparently
query using our domain classes.

As you're first trying to build your ORM config, it can be useful
to write some tests for it, as in <<orm_tests>>:


[[orm_tests]]
.Testing the ORM directly (throwaway tests)
====
[source,python]
----

def test_order_mapper_can_load_lines(session):
    session.execute('INSERT INTO "order" VALUES (1)')
    session.execute('INSERT INTO "order" VALUES (2)')
    session.execute('INSERT INTO "order_lines" VALUES (1, "sku1", 12)')
    session.execute('INSERT INTO "order_lines" VALUES (1, "sku2", 13)')
    session.execute('INSERT INTO "order_lines" VALUES (2, "sku3", 14)')
    expected_order = Order({'sku1': 12, 'sku2': 13})
    retrieved_order = session.query(Order).first()
    assert retrieved_order.lines == expected_order.lines


def test_order_mapper_can_save_lines(session):
    new_order = Order({'sku1': 12, 'sku2': 13})
    session.add(new_order)
    session.commit()

    rows = list(session.execute('SELECT * FROM "order_lines"'))
    assert rows == [
        (1, 'sku1', 12),
        (1, 'sku2', 13),
    ]
----
====

But you probably wouldn't keep these tests around--as we'll see shortly,
once you've taken the step of inverting the dependency of ORM and
domain model, it's only a small additional step to implement an additional
abstraction called the Repository pattern, which will be easier to write
tests against, and will provide a simple, common interface for faking out
later in tests.

But we've already achieved our objective of inverting the traditional
dependency: the domain model stays "pure" and free from infrastructure
concerns.  We could throw away SQLAlchemy and use a different ORM, or a totally
different persistence system, and the domain model doesn't need to change at
all.

We are glossing over some complexity here.  If we want to stick to using
dicts as our primary data structure, there is some slightly tricky config
to get right.  For the curious, there's more example code at
https://github.com/python-leap/code/blob/orm-experiments-backtodicts/orm.py

//TODO: fix link.

Depending on what you're doing in your domain model, and especially if you
stray far from the OO paradigm, you may find it increasingly hard to get
the ORM to produce the exact behaviour you need,  and you may need to modify
your domain modelfootnote:[Harry came extremely close to giving up his beloved
dicts, but thanks to the amazingly helpful SQLAlchemy maintainers, he didn't
have to, or at least not yet.  Shout out to Mike Bayer!].  As so often with
architectural decisions, there is a trade-off you'll need to consider.  As
the Zen of Python says, "Practicality beats purity!"



=== Introducing Repository Pattern.

bla!

