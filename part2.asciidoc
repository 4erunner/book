[[part2]]
[part]
== Part 2: Event-Driven Architecture

[quote, Alan Kay]
____

I'm sorry that I long ago coined the term "objects" for this topic because it
gets many people to focus on the lesser idea.

The big idea is "messaging" ... The key in making great and growable systems is
much more to design how its modules communicate rather than what their internal
properties and behaviors should be. 
____

It's all very well being able to write _one_ domain model to manage a single bit
of business process, but what happens when we need to write _many_ models? In
the real world, our applications sit within an organisation and need to exchange
information with other parts of the system.



//TODO (DS): Up until this point you haven't really said much about how this
//code exists in the context of a wider system. I had assumed it was a
//microservice...Maybe earlier in the book we need to understand a bit about how
//this code might exist in a monolith/communicate with a monolith. If the
//answer is still via a message bus, then isn't the distributed system angle a
//red herring here?

Faced with this requirement, many teams reach for microservices via HTTP APIs
but if they're not careful, they'll end up producing the most chaotic mess of
all: the distributed big ball of mud.

In part two, we'll show how the techniques from part one can be extended to
distributed systems. We'll zoom out to look at how we can compose a system from
many small components that interact through asynchronous message passing.

We'll see how our service layer and unit of work allow us to reconfigure our app
to run as an asynchronous message processor, and how event driven systems help
us to decouple aggregates and applications from one another.

* TODO: part2_context_diag

We'll look at the following patterns and techniques:

Domain events::
  Trigger workflows that cross consistency boundaries.

Message bus::
  Provide a unified way of invoking use-cases from any endpoint.

CQRS::
  Improve performance and scalability by separating reads and writes.

Plus we'll introduce a dependency injection framework that uses type hints, just
to annoy Harry.

//TODO (DS): Doesn't seem much to do with event driven architecture?

//TODO: plus, we don't, currently.

//TODO (DS): It seems to me the two key themes in this book are vertical and
//horizontal decoupling. Did you consider choosing those for the two parts?
