[[chapter_01]]
[preface]
== Why do our designs go wrong?

What comes to mind when you hear the word "chaos"? Perhaps you think of a noisy stock exchange, or your kitchen in the morning - everything confused and jumbled. When you think of the word "order" perhaps you think of an empty room, serene and calm. For scientists, though, chaos is characterised by homogeneity, and order by complexity.

For example, you are a highly ordered system. Your body has a rigid structure provided by your skeleton, which supports your organs, which are made up of differentiated tissues, which are composed of cells, which comprise organelles. By contrast, if we took all of your component atoms and stirred them into a bucket full of goop, you would be in a disordered, chaotic state. The natural tendency of things is to collapse into chaos because it requires energy to introduce order. For example, we could take all of your constituent atoms and move them so that the iron was over on one side of the bucket, and the water over on the other, but the moment we stop applying force, the whole thing will collapse once again to primordial ooze.

Software systems, too, tend toward chaos. When we first start building a new system, we have grand ideas that our code will be clean and well-ordered, but over time we find that it gathers cruft and edge cases, and ends up a confusing morass of manager classes and utils modules. We find that our sensibly layered architecture has collapsed into itself like an over-soggy trifle. Chaotic software systems are characterised by a sameness of function: API handlers that have domain knowledge, and send emails and perform logging; "business logic" classes that perform no calculations but do perform IO; and everything coupled to everything else so that changing any part of the system becomes fraught with danger. This is so common that software engineers have their own word for chaos: The Big Ball of Mud anti-pattern.

Big ball of mud is the natural state of software in the same way that goop in a bucket is the natural state of your constituent atoms. It takes energy and direction to prevent the collapse. Fortunately, the techniques to avoid creating a big ball of mud aren't complex.

=== Encapsulation

The term "encapsulation" covers two closely related ideas, simplifying behaviour and hiding data. When we encapsulate behaviour, we take a complex algorithm and place it behind a simpler abstraction. Consider the following two snippets of Python code.

```
import urllib
import urllib2

# do horrible things to make a post to duck duck go and read the json
```

```
import requests

# do pleasant things to achieve the same
```

Both of these code listings do the same thing: they submit form encoded values to a URL in order to perform a Google search, but the second is simpler to read and understand because it operates at a higher level of abstraction. We can take this one step further still by identifying the role the code is playing and making it explicit.

```
import duckduckgo

result = duckduckgo.search('sausages')
```

Encapsulating the behaviour by identifying roles is a powerful tool for making our code more expressive, more testable, and easier to maintain.

When we encapsulate data, we reduce the scope where variables are available.


=== Layering

Encapsulation helps us by hiding details and protecting the consistency of our data, but we also need to pay attention to the interactions between our objects and functions. When one function or object refers to another, we say that the one *depends on* the other. These dependencies form a kind of network, a graph, where the nodes are functions and classes, and the edges are the calls betwen them.

In a big ball of mud, the dependencies are out of control. Changing one node of the graph becomes difficult because it has the potential to affect many other parts of the system. Layered architectures are one way of tackling this problem. In a layered architecture, we divide our code into discrete categories or roles and we introduce rules about which categories of code can call each other.

For example most people are familiar with the three layered architecture:

[three-layered architecture]

This is perhaps the most common pattern for building business software. In this model we have user-interface components, which could be a web page, or an API, or a command line; these user-interface components communicate with a business logic layer that contains our business rules and our workflows; and finally we have a data layer that's responsible for storing and retrieving data. For the rest of this book, we're going to be systematically turning this model inside out by obeying one simple principle.

=== The Dependency Inversion Principle

You might be familiar with the dependency inversion principle already, because it's the D in the SOLID mnemonic. Formally, the DIP says:

1. High-level modules should not depend on low-level modules. Both should depend on abstractions.
2. Abstractions should not depend on details. Details should depend on abstractions.

But what does this mean? Let's take it bit by bit.

"High level modules" are the code that your organisation really cares about. Perhaps you work for a pharmaceutical company, and your high-level modules deal with patients and trials. Perhaps you work for a bank, and your high level modules manage trades and exchanges. The high-level modules of a software system are the functions, classes, and packages that deal with our real world concepts.

By contrast, "low-level modules" are the code that your organisation doesn't care about. It's unlikely that your HR department get excited about file systems, or network sockets. It's not often that you can discuss SMTP, or HTTP, or AMQP with your finance team. For our non-technical stakeholders, these low-level concepts aren't interesting or relevant. All they care about is whether the high-level concepts work correctly. If payroll runs on time, your business is unlikely to care whether that's a cron job or a transient function running on Kubernetes.

We already know what abstractions are: they're simplified interfaces that encapsulate some role, in the way that our duckduckgo module encapsulated a search engine's API.

So the first part of the DIP says that our business code shouldn't depend on technical details, instead they should both use abstractions.

The second part is even more mysterious. "Abstractions should not depend on details" seems clear enough, but "Details should depend on abstractions" is hard to imagine. How can we have an abstraction that doesn't depend on the details it's abstracting? We'll come to that shortly, but before we can turn our three-layered architecture inside out, we need to talk more about that middle layer.

== What is a domain model?

In the previous chapter, we used the term "business logic layer" to describe the central layer of a three-layered architecture. For the rest of the book we're going to use the term "domain model" instead. This is a term from the DDD community that does a better job of capturing our intended meaning.

The "domain" is a fancy way of saying "the problem you're trying to solve". I currently work for an online retailer of furniture. Depending on which system I'm talking about, the domain might be purchasing and procurement, or product design, or logistics and delivery. Most programmers spend their days trying to improve or automate business processes; the domain is the set of activities that those processes support.

A model is a map of a process or phenomenon that captures some useful property. Humans are exceptionally good at producing models of things in their heads. For example, when someone throws a ball toward you, you're able to predict its movement almost unconsciously, because you have a model of how objects move in space. Your model isn't perfect by any means. Humans have terrible intutions about how objects behave at near-light speeds or in a vacuum because our model was never designed to cover those cases. That doesn't mean the model is wrong, but it does mean that some predictions fall outside of its domain.

The domain model is the mental map that business owners have of their processes. All business people have these mental maps, they're how humans think about complex processes. [TODO: Listening for business jargon].

We're going to use a real-world domain model throughout this book, specifically a model from our current employment. Made.com are a successful furniture retailer. When you buy a sofa or a coffee table, we have to figure out how best to get your goods to your home.

[Context diagram for allocation]

At a high level, we have separate systems that are responsible for buying stock, selling stock to customers, and shipping goods to customers. There's a system in the middle that needs to coordinate the process by allocating stock to a customer's orders. Our business works by purchasing small quantities of stock at a time, which we call batches. These batches of stock are shipped from the supplier to our warehouse. At any time, we have thousands of different batches on their way. Some of those batches are only days away from delivery, others might be three months away by ship. Our aim is to predict how much stock we need to buy so that we can sell all of our stock just before it arrives at the warehouse. This keeps our warehouse costs down, making us more efficient as a business.

The Availability system has two jobs to perform. Firstly, it needs to match incoming stock with incoming orders so that we minimise the time customers are waiting. We need to handle problems like damaged goods, or shipping delays, or cancelled orders. Secondly, it needs to answer the question "if I buy three cushions and a sofa, how long will they take to arrive?".

We're going to start the book in earnest by asking you to write some code to solve this business need.

=== Allocation Version 1.0 ===

```
* *Customers* place *orders*. An order has multiple *order lines*, where each line has a unique id, a *product code* and a *quantity*, eg. 10 units of RED-CHAIR, or 1 unit of TASTELESS-LAMP.
* The purchasing department order *Batches* of stock. A *Batch* of stock also has a unique id, a *Product Code* and a *Quantity*.
* We need to *allocate* *order lines* to *batches*.
* When I allocate 1 unit of stock to a *batch*, the *available quantity* is reduced. Eg. I have a *Batch* of 20 SMALL-TABLE, and I *allocate* an *order line* for 2 SMALL-TABLE. The *batch* should have 18 SMALL-TABLE remaining.
* I can't *allocate* to a *batch* if the *available quantity* is less than the *quantity* of the *order line*. Eg. I have a batch of 1 CURIOUS-POUFFE, and an *order line* for 2 CURIOUS-POUFFE. I should not be able to *allocate* the *line* to the *batch*.
* Customers can cancel *orders*. When an order is cancelled, we need to *deallocate* the *order lines*.
* When I *deallocate* an *order line* from a *batch*, the *available quantity* is incremented by the *quantity* of the *order line*; eg. I have a *batch* of 3 CRIMSON-TOWEL and I *allocate* 1 CRIMSON-TOWEL to the *batch*. When I *deallocate* the *order line* from the *batch*, the *available quantity* is 3.
* I can't *deallocate* an *order line* from a *batch* unless I first *allocate* the *order line*, eg. I have a *batch* of 12 GAUCHE-PAINTING with no *allocations*. When I deallocate an *order line* of 1 GAUCHE-PAINTING, the *available quantity* should still be 12.
* I can't the same line twice; eg, I have a batch of 10 BLUE-VASE, and I allocate an order line for 2 BLUE-VASE. When I allocate the order line again, the batch should still have an available quantity of 8.
```


[TODO: The following blobs are future requirements of the allocator program that motivate us to make things more complex]

``` (aggregates)
* A *product* has many *batches* at a time.
* When *allocating* an *order line* to a *product* we should prefer the *batch* with the earliest *arrival date*.
* I should be able to ask a *Product* for the earliest *arrival date* for a *quantity*. Eg. I have a *product* with a batch of 1 BIG-RUG arriving in 3 days, and another batch of 2 BIG-RUG arriving in 8 days. When I ask for the arrival time of 1 BIG-RUG, the answer should be 3 days; when I ask for the arrival time of 2 BIG-RUG, the answer should be 3 days.
* The arrival time of a *batch* might change due to manufacturing problems or shipping delays. When I change the arrival time of a batch, the allocations should not change.
```

``` (events)
* The quantity of a batch might change due to manufacturing problems, or damage caused during transit. If the quantity of a batch changes, we might need to deallocate some order lines.
```

How did you go about tackling the problem? Whenever I have a complex domain, my first step is to write a unit test.

```
def test_when_allocating_an_order_to_a_batch():
    batch = Batch(20, "SMALL-TABLE")
    line = OrderLine(2, "SMALL-TABLE")
    batch.allocate(line)

    assert batch.available == 18
```

The name of my unit test describes the behaviour that I want to see from the system, and the names of the classes and variables that I use are taken from the business jargon. I could show this code to a non-technical co-worker, and he would agree that this correctly describes the behaviour of the system.

```
from dataclasses import dataclass


@dataclass
class OrderLine:

    quantity: int
    product_code: str


class Batch:
    def __init__(self, quantity: int, product_code: str) -> None:
        self.available = quantity

    def allocate(self, order: OrderLine) -> None:
        self.available -= order.quantity
```

The implementation is straightforward. Our Batch class is really just wrapping a single integer `available` which it decrements whenever we allocate some stock to it. Our OrderLine class doesn't have any behaviour at all, so we'll just use a dataclass for now. Some of you might have used a tuple, or even just an integer to represent the line. My preference is to use named typing where I can because I want to be able to read this code in 6 months time without having to remember that `line[0]` is the quantity.

Let's write a breaking test.

```
def test_when_a_batch_has_insufficient_stock():
    batch = Batch(1, "CURIOUS-POUFFE")
    line = OrderLine(2, "CURIOUS-POUFFE")
    with pytest.raises(ValueError):
        batch.allocate(line)
```
